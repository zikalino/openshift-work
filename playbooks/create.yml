# Description
# ===========
# OpenShift sample for Azure

---
- hosts: localhost

  tasks:
    # --- PRE TASKS ---
    # All the other tasks require these tasks
    - name: Create a resource group
      azure_rm_resourcegroup:
        name: "{{ resource_group }}"
        location: "{{ location }}"

    - name: Create virtual network
      azure_rm_virtualnetwork:
        resource_group: "{{ resource_group }}"
        name: "{{ virtual_network_name }}"
        address_prefixes: "{{ virtual_network_cidr }}"

    # --- PARALLELIZABLE TASKS ---
    # All these tasks have no requirements other than RG and vNet
    # They can be run in any order
    - name: Create public IP address for Master LB
      azure_rm_publicipaddress:
        resource_group: "{{ resource_group }}"
        allocation_method: Static
        domain_name: "{{ master_lb_public_ip }}"
        name: "{{ master_lb_public_ip }}"
      async: 150
      poll: 0

    - name: Create public IP address for Infra LB
      azure_rm_publicipaddress:
        resource_group: "{{ resource_group }}"
        allocation_method: Static
        domain_name: "{{ router_lb_public_ip }}"
        name: "{{ router_lb_public_ip }}"
      async: 150
      poll: 0

    - name: Create public IP address for Bastion node
      azure_rm_publicipaddress:
        resource_group: "{{ resource_group }}"
        allocation_method: Static
        name: bastion_publicip
      async: 150
      poll: 0

    - name: Add master subnet
      azure_rm_subnet:
        resource_group: "{{ resource_group }}"
        name: mastersubnet
        address_prefix: "{{ master_subnet_cidr }}"
        virtual_network: "{{ virtual_network_name }}"
      async: 150
      poll: 0
  
    - name: Add node subnet
      azure_rm_subnet:
        resource_group: "{{ resource_group }}"
        name: nodesubnet
        address_prefix: "{{ node_subnet_cidr }}"
        virtual_network: "{{ virtual_network_name }}"
      async: 150
      poll: 0
  
    - name: Add infra subnet
      azure_rm_subnet:
        resource_group: "{{ resource_group }}"
        name: infrasubnet
        address_prefix: "{{ infra_subnet_cidr }}"
        virtual_network: "{{ virtual_network_name }}"
      async: 150
      poll: 0
        
    - name: Create infrastructure NSG
      azure_rm_securitygroup:
        resource_group: "{{ resource_group }}"
        name: "{{ cluster_prefix }}-infra-nsg"
        rules:
          - name: allowSSHin_all
            protocol: Tcp
            destination_port_range: 22
            access: Allow
            priority: 100
            direction: Inbound
          - name: allowHTTPSIn_all
            protocol: Tcp
            destination_port_range: 443
            access: Allow
            priority: 200
            direction: Inbound
          - name: allowHTTPIn_all
            protocol: Tcp
            destination_port_range: 80
            access: Allow
            priority: 300
            direction: Inbound
      async: 150
      poll: 0

    - name: Create master NSG
      azure_rm_securitygroup:
        resource_group: "{{ resource_group }}"
        name: "{{ cluster_prefix }}-master-nsg"
        rules:
          - name: allowSSHin_all
            protocol: Tcp
            destination_port_range: 22
            access: Allow
            priority: 100
            direction: Inbound
          - name: allowHTTPSIn_all
            protocol: Tcp
            destination_port_range: 443
            access: Allow
            priority: 200
            direction: Inbound
      async: 150
      poll: 0

    - name: Create node NSG
      azure_rm_securitygroup:
        resource_group: "{{ resource_group }}"
        name: "{{ cluster_prefix }}-node-nsg"
        rules:
          - name: allowSSHin_all
            protocol: Tcp
            destination_port_range: 22
            access: Allow
            priority: 100
            direction: Inbound
          - name: allowHTTPSIn_all
            protocol: Tcp
            destination_port_range: 443
            access: Allow
            priority: 200
            direction: Inbound
          - name: allowHTTPIn_all
            protocol: Tcp
            destination_port_range: 80
            access: Allow
            priority: 300
            direction: Inbound
      async: 150
      poll: 0

    - name: Create bastion NSG
      azure_rm_securitygroup:
        resource_group: "{{ resource_group }}"
        name: "{{ cluster_prefix }}-bastion-nsg"
        rules:
          - name: allowSSHin_all
            protocol: Tcp
            destination_port_range: 22
            access: Allow
            priority: 100
            direction: Inbound
          - name: allowHTTPSIn_all
            protocol: Tcp
            destination_port_range: 443
            access: Allow
            priority: 200
            direction: Inbound
          - name: allowHTTPIn_all
            protocol: Tcp
            destination_port_range: 80
            access: Allow
            priority: 300
            direction: Inbound
      async: 150
      poll: 0

    - name: Create master availability set
      azure_rm_availabilityset:
        name: masteravailabilityset
        location: "{{ location }}"
        resource_group: "{{ resource_group }}"
        sku: Aligned
      async: 150
      poll: 0

    - name: Create node availability set
      azure_rm_availabilityset:
        name: nodeavailabilityset
        location: "{{ location }}"
        resource_group: "{{ resource_group }}"
        sku: Aligned
      async: 150
      poll: 0

    - name: Create infra availability set
      azure_rm_availabilityset:
        name: infraavailabilityset
        location: "{{ location }}"
        resource_group: "{{ resource_group }}"
        sku: Aligned
      async: 150
      poll: 0

    - name: Wait for two IP addresses to be present
      azure_rm_publicipaddress_facts:
        resource_group: "{{ resource_group }}"
      register: output
      until: output.ansible_facts.azure_publicipaddresses | length == 2
      delay: 20
      retries: 10

    # --- Load Balancers ---
    # These require the public IPs: master and infra respectively
    - name: Create master load balancer
      azure_rm_loadbalancer:
        name: "{{ cluster_prefix }}-masterlb"
        location: "{{ location }}"
        resource_group: "{{ resource_group }}"
        frontend_ip_configurations:
          - name: frontendip
            public_ip_address: "{{ master_lb_public_ip }}"
        load_balancing_rules:
          - name: OpenShiftAdminConsole
            frontend_ip_configuration: frontendip
            load_distribution: SourceIP
            idle_timeout: 15
            probe: httpsprobe
            backend_address_pool: backendaddrpool0
            frontend_port: 443
            backend_port: 443
        backend_address_pools:
          - name: backendaddrpool0
        probes:
          - name: httpsprobe
            port: 443

    - name: Create infra load balancer
      azure_rm_loadbalancer:
        name: "{{ cluster_prefix }}-infralb"
        location: "{{ location }}"
        resource_group: "{{ resource_group }}"
        frontend_ip_configurations:
          - name: frontendip
            public_ip_address: "{{ router_lb_public_ip }}"
        load_balancing_rules:
          - name: OpenShiftRouterHTTP
            frontend_ip_configuration: frontendip
            probe: httpprobe
            backend_address_pool: backendaddrpool0
            frontend_port: 80
            backend_port: 80
          - name: OpenShiftRouterHTTPS
            frontend_ip_configuration: frontendip
            probe: httpsprobe
            backend_address_pool: backendaddrpool0
            frontend_port: 443
            backend_port: 443
        backend_address_pools:
          - name: backendaddrpool0
        probes:
          - name: httpsprobe
            port: 443
          - name: httpprobe
            port: 80

    # --- NICs ---
    # These require: Subnets and NSGs
    - name: Create virtual network interface card for master
      azure_rm_networkinterface:
        resource_group: "{{ resource_group }}"
        name: "{{ cluster_prefix }}-master-{{ item }}-nic"
        virtual_network: "{{ virtual_network_name }}"
        subnet: mastersubnet
        security_group: "{{ cluster_prefix }}-master-nsg"
        ip_configurations:
          - name: ipconfig1
            load_balancer_backend_address_pools:
              - name: backendaddrpool0
                load_balancer: "{{ cluster_prefix }}-masterlb"
      with_sequence: start=0 end={{ master_count - 1 }}
      async: 400
      poll: 0
      register: master_nic_sleeper

    - name: Create virtual network interface card for node
      azure_rm_networkinterface:
        resource_group: "{{ resource_group }}"
        name: "{{ cluster_prefix }}-node-{{ item }}-nic"
        virtual_network: "{{ virtual_network_name }}"
        subnet: nodesubnet
        security_group: "{{ cluster_prefix }}-node-nsg"
      with_sequence: start=0 end={{ node_count - 1 }}
      async: 400
      poll: 0
      register: node_nic_sleeper

    - name: Create virtual network interface card for infra
      azure_rm_networkinterface:
        resource_group: "{{ resource_group }}"
        name: "{{ cluster_prefix }}-infra-{{ item }}-nic"
        virtual_network: "{{ virtual_network_name }}"
        subnet: infrasubnet
        security_group: "{{ cluster_prefix }}-infra-nsg"
        ip_configurations:
          - name: ipconfig1
            load_balancer_backend_address_pools:
              - name: backendaddrpool0
                load_balancer: "{{ cluster_prefix }}-infralb"
      with_sequence: start=0 end={{ infra_count - 1 }}
      async: 400
      poll: 0
      register: infra_nic_sleeper

    - name: Create virtual network interface card for bastion
      azure_rm_networkinterface:
        resource_group: "{{ resource_group }}"
        name: "{{ cluster_prefix }}-bastion-nic"
        virtual_network: "{{ virtual_network_name }}"
        security_group: "{{ cluster_prefix }}-bastion-nsg"
      async: 400
      poll: 0
      register: bastion_nic_sleeper

    # Create bastion
    - name: Create bastion VM
      azure_rm_virtualmachine:
        resource_group: "{{ resource_group }}"
        name: "{{ cluster_prefix }}-bastion"
        managed_disk_type: Standard_LRS
        vm_size: Standard_DS1_v2
        admin_username: "{{ admin_username }}"
        admin_password: "{{ admin_password }}"
        network_interfaces: "{{ cluster_prefix }}-bastion-nic"
        image:
          offer: RHEL
          publisher: RedHat
          sku: 7-RAW
          version: latest
        data_disks:
            - lun: 0
              disk_size_gb: 64
              managed_disk_type: Standard_LRS
      async: 150
      poll: 0

    # Creating master
    - name: Create master VMs
      azure_rm_virtualmachine:
        resource_group: "{{ resource_group }}"
        name: "{{ cluster_prefix }}-master-{{ item }}"
        managed_disk_type: "{{ managed_disk_type }}"
        vm_size: "{{ vm_size_master }}"
        admin_username: "{{ admin_username }}"
        ssh_password_enabled: false
        ssh_public_keys:
          - path: /home/{{ admin_username }}/.ssh/authorized_keys
            key_data: "{{ admin_pubkey }}"
        network_interfaces: "{{ cluster_prefix }}-master-{{ item }}-nic"
        image:
          offer: RHEL
          publisher: RedHat
          sku: 7-RAW
          version: latest
        data_disks:
            - lun: 0
              disk_size_gb: "{{ data_disk_size }}"
              managed_disk_type: "{{ managed_disk_type }}"
        availability_set: masteravailabilityset
      with_sequence: start=0 end={{ master_count - 1 }}
      async: 150
      poll: 0

    - name: Create node VMs
      azure_rm_virtualmachine:
        resource_group: "{{ resource_group }}"
        name: "{{ cluster_prefix }}-node-{{ item }}"
        managed_disk_type: "{{ managed_disk_type }}"
        vm_size: "{{ vm_size_node }}"
        admin_username: "{{ admin_username }}"
        ssh_password_enabled: false
        ssh_public_keys:
          - path: /home/{{ admin_username }}/.ssh/authorized_keys
            key_data: "{{ admin_pubkey }}"
        network_interfaces: "{{ cluster_prefix }}-node-{{ item }}-nic"
        image:
          offer: RHEL
          publisher: RedHat
          sku: 7-RAW
          version: latest
        data_disks:
            - lun: 0
              disk_size_gb: "{{ data_disk_size }}"
              managed_disk_type: "{{ managed_disk_type }}"
        availability_set: nodeavailabilityset
      with_sequence: start=0 end={{ node_count - 1 }}
      async: 150
      poll: 0

    - name: Create infra VMs
      azure_rm_virtualmachine:
        resource_group: "{{ resource_group }}"
        name: "{{ cluster_prefix }}-infra-{{ item }}"
        managed_disk_type: "{{ managed_disk_type }}"
        vm_size: "{{ vm_size_infra }}"
        admin_username: "{{ admin_username }}"
        ssh_password_enabled: false
        ssh_public_keys:
          - path: /home/{{ admin_username }}/.ssh/authorized_keys
            key_data: "{{ admin_pubkey }}"
        network_interfaces: "{{ cluster_prefix }}-infra-{{ item }}-nic"
        image:
          offer: RHEL
          publisher: RedHat
          sku: 7-RAW
          version: latest
        data_disks:
            - lun: 0
              disk_size_gb: "{{ data_disk_size }}"
              managed_disk_type: "{{ managed_disk_type }}"
        availability_set: infraavailabilityset
      with_sequence: start=0 end={{ infra_count - 1 }}
      async: 150
      poll: 0

    - name: Wait for Virtual Machines
      azure_rm_resource_facts:
        # url: /subscriptions/{{ lookup('env','AZURE_SUBSCRIPTION_ID') }}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines
        api_version: '2018-06-01'
        resource_group: "{{ resource_group }}"
        provider: compute
        resource_type: virtualmachines
      register: output
      until: output.response[0].value | length == (infra_count + node_count + master_count)
      delay: 60
      retries: 10

    # --- VM Extensions ---
    # These require: VMs
    - name: Create master VM extension
      azure_rm_virtualmachine_extension:
        resource_group: "{{ resource_group }}"
        name: deployOpenShift
        virtual_machine_name: "{{ cluster_prefix }}-master-{{ item }}"
        publisher: Microsoft.Azure.Extensions
        virtual_machine_extension_type: CustomScript
        type_handler_version: 2.0
        settings:
          fileUris:
            - 'https://raw.githubusercontent.com/Microsoft/openshift-origin/master/scripts/masterPrep.sh'
          commandToExecute: "bash masterPrep.sh {{ persistent_volume_name }} {{ admin_user_name }} {{ location }}"
      with_sequence: start=0 end={{ master_count - 1 }}
      when: runvmext == "true"
      async: 150
      poll: 0
    

    - name: Create infra VM extension
      azure_rm_virtualmachine_extension:
        resource_group: "{{ resource_group }}"
        name: deployOpenShift
        virtual_machine_name: "{{ cluster_prefix }}-infra-{{ item }}"
        publisher: Microsoft.Azure.Extensions
        virtual_machine_extension_type: CustomScript
        type_handler_version: 2.0
        settings:
          fileUris:
            - 'https://raw.githubusercontent.com/Microsoft/openshift-origin/master/scripts/nodePrep.sh'
          commandToExecute: "bash nodePrep.sh"
      with_sequence: start=0 end={{ infra_count - 1 }}
      when: runvmext == "true"
      async: 150
      poll: 0

    - name: Create node VM extension
      azure_rm_virtualmachine_extension:
        resource_group: "{{ resource_group }}"
        name: deployOpenShift
        virtual_machine_name: "{{ cluster_prefix }}-node-{{ item }}"
        publisher: Microsoft.Azure.Extensions
        virtual_machine_extension_type: CustomScript
        type_handler_version: 2.0
        settings:
          fileUris:
            - 'https://raw.githubusercontent.com/Microsoft/openshift-origin/master/scripts/nodePrep.sh'
          commandToExecute: "bash nodePrep.sh"
      with_sequence: start=0 end={{ node_count - 1 }}
      when: runvmext == "true"
      async: 150
      poll: 0